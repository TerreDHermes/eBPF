Загрузка eBPF-кода в ядро на интерфейс lo с помощью  xdp-loader:
    -> sudo xdp-loader load -m skb lo xdp_pass_kern.o

Просмотр установленного eBPF-кода в ядро на интерфейс lo:
    -> sudo xdp-loader status lo
    -> sudo ip link show dev lo

Просмотр установленного eBPF-кода в ядро на интерфейс enp0s3:
    -> sudo xdp-loader status enp0s3
    -> sudo ip link show dev enp0s3

Удаление установленного eBPF-кода в ядро на интерфейс lo:
    -> sudo ip link set dev lo xdpgeneric off

Просмотр eBPF-мапы по имени: 
    -> sudo bpftool map dump name trap_ips_map2

Вставляем значение в eBPF-мапу:
    -> sudo bpftool map update name target_ip_map key 0x0 0x0 0x0 0x0 value 0xc0 0x91 0x22 0x38

Логи из eBPF-кода (прямая трансляция):
    -> sudo cat /sys/kernel/debug/tracing/trace_pipe


sudo env INTERFACE=enp0s3 TRAP_IP=192.168.45.67 ./loader

-----------------------------------------------------------------------

    -> llvm-objdump -t xdp_pass_kern.o

    Эта команда выводит таблицу символов (symbol table) из твоего ELF-файла xdp_pass_kern.o,
который является скомпилированным BPF-объектом.
    Таблица символов — это часть объектного файла, в которой хранится информация о:
    * Имя функции или переменной
    * Адрес в памяти
    * Размер
    * Секция, к которой символ относится
    * Тип символа (функция, данные и т.д.)
    * Видимость (локальный/глобальный)
    SEC("имя_секции") — это макрос , который говорит компилятору (например, clang)
    поместить функцию или переменную в отдельную секцию ELF-файла с именем "имя_секции".
    Для этого используется специальная секция в объектном файле .o, 
    где указывается тип программы и её точка входа .

    Загрузка с помощью ip конкретной секции из xdp_pass_kern.o на интерфейс lo:
    -> sudo ip link set dev lo xdp obj xdp_pass_kern.o sec xdp_icmp_logger